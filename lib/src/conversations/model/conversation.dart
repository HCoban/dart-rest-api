import 'package:messagebird_dart/src/contacts/model/contact.dart';

import 'channel.dart';
import 'messages_count.dart';

/// Class encapsulating a [Conversation] object.
///
/// A [Conversation] is the view of all messages between the system and a
/// customer across any of the configured channels:
/// * Messages from multiple channels are collected and displayed in a single
/// conversation.
/// * When the first message is sent or received from a user, a conversation is
/// automatically created for them.
/// * A conversation status can be active or archived, but only one active
/// conversation exists for each customer at a time.
/// * Archiving can be used to end a conversation so that the next time that the
/// customer reaches out, a new conversation will be started. This is especially
/// helpful for support use cases where conversations need to be opened and
/// closed, rather than merely resumed.
class Conversation {
  /// A unique ID generated by the MessageBird platform that identifies this
  /// conversation.
  String id;

  /// The MessageBird Contact for this conversation.
  Contact contact;

  /// A series of Channels through which the contact of the conversation can be
  /// reached. This attribute can be empty if the conversation doesn't have any
  /// channels yet.
  List<Channel> channels;

  /// The status of the conversation. See [ConversationStatus] for allowed
  /// values.
  ConversationStatus status;

  /// A link to the messages of this conversation. See [MessagesCount] for
  /// definition.
  MessagesCount messages;

  /// The date and time when this conversation was first created in RFC3339
  /// format.
  DateTime createdDatetime;

  /// The date and time when this conversation was most recently updated in
  /// RFC3339 format. This applies only to changes of the Conversation object
  /// itself, not messages, i.e. currently just status changes.
  DateTime updatedDatetime;

  /// The date and time when the most recent message was added to this
  /// conversation in RFC3339 format.
  DateTime lastReceivedDatetime;

  /// A unique ID for the most recently used channel that sent or received a
  /// message in this conversation.
  String lastUsedChannelId;

  /// Constructor.
  Conversation(
      this.id,
      this.contact,
      this.channels,
      this.status,
      this.messages,
      this.createdDatetime,
      this.updatedDatetime,
      this.lastReceivedDatetime,
      this.lastUsedChannelId);

  /// Construct a [Conversation] object from a [json] object.
  factory Conversation.fromJson(Map<String, dynamic> json) => json == null
      ? null
      : Conversation(
          json['id'].toString(),
          Contact.fromJson(json['contact']),
          Channel.fromJsonList(json['channels']),
          ConversationStatus.values.firstWhere(
              (status) =>
                  status.toString() == 'ConversationStatus.${json['status']}',
              orElse: () => null),
          MessagesCount.fromJson(json['messages']),
          DateTime.parse(json['createdDatetime'].toString()),
          DateTime.parse(json['updatedDatetime'].toString()),
          DateTime.parse(json['lastReceivedDatetime'].toString()),
          json['lastUsedChannelId'].toString());
}

/// Enumeration of [Conversation] statusses
enum ConversationStatus {
  /// [Conversation] is active.
  active,

  /// [Conversation] is archived.
  archived
}
