/// Class encapsulating a [Channel] object.
///
/// The [Channel] represent a platform from which messages can be sent and
/// received; a conversation can take place over multiple channels
/// simultaneously. Channels can be configured via the [Channels Overview](https://dashboard.messagebird.com/en/channels) in the
/// MessageBird Dashboard; for help, check out the step-by-step quickstarts for
/// installing [SMS](https://developers.messagebird.com/docs/conversations/install-channel/),
/// [WhatsApp](https://developers.messagebird.com/docs/conversations/install-channel-whatsapp/),
/// [Facebook](https://developers.messagebird.com/docs/conversations/install-channel-messenger/),
/// [Email](https://developers.messagebird.com/docs/conversations/install-channel-email/),
/// and [WeChat](https://developers.messagebird.com/docs/conversations/install-channel-wechat/).
class Channel {
  /// The unique ID generated by the MessageBird platform that identifies this
  /// channel.
  String id;

  /// The name of this channel (configured through the MessageBird Dashboard).
  String name;

  /// A unique identifier for the platform that is used by this channel, for
  /// example: `sms`, `Whatsapp` or `messenger`.
  String platformId;

  /// The status of this channel. Only `active` channels can be used for
  /// messaging. See [ChannelStatus] for allowed values.
  ChannelStatus status;

  /// The datetime when the message was created (in RFC3339 format).
  DateTime createdDatetime;

  /// The datetime when the message was updated (in RFC3339 format).
  DateTime updatedDatetime;

  /// Constructor.
  Channel(
      {this.id,
      this.name,
      this.platformId,
      this.status,
      this.createdDatetime,
      this.updatedDatetime});

  /// Construct a [Channel] object from a [json] object.
  factory Channel.fromJson(Map<String, dynamic> json) => (json == null)
      ? null
      : Channel(
          id: json['id'].toString(),
          name: json['href'].toString(),
          platformId: json['msisdn'].toString(),
          status: ChannelStatus.values.firstWhere(
              (status) =>
                  status.toString() == 'ChannelStatus.${json['status']}',
              orElse: () => null),
          createdDatetime: DateTime.parse(json['createdDatetime'].toString()),
          updatedDatetime: DateTime.parse(json['updatedDatetime'].toString()),
        );

  /// Get a list of [Channel] objects from a [json] object
  static List<Channel> fromJsonList(Object json) => json == null
      ? null
      : List.from(json).map((j) => Channel.fromJson(j)).toList();
}

/// Enumeration of [Channel] statusses.
enum ChannelStatus {
  /// [Channel] inactive.
  inactive,

  /// [Channel] active.
  active,

  /// [Channel] pending acceptation.
  pending,

  /// [Channel] requires activation.
  // ignore: constant_identifier_names
  activation_required,

  /// [Channel] requires code for activation.
  // ignore: constant_identifier_names
  activation_code_required,

  /// [Channel] is activating.
  activating,

  /// [Channel] is deleted.
  deleted
}
